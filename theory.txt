Question : useContext vs Redux ?
Answer: These both are the centralized data locations. 

        we use , useContext to avoid props drilling. and where the data set is small, app is small.
        use context is a Hook.
        it is used to share data.
        changes are maid by Context value.
        easy to understand and implement.

        But we use Redux , in large applications where a lot of data will be handled.
        Redux is a state management Library.
        it used to manage data and state.
        changes are maid by functions. like reducer functions.
        hard to implement and understand.


Question : Advantage of using Redux/toolkit over Redux.
Answer: Redux was initially very hard, to understand and implement, boiler code is big, many packages were requred to even start working.
        But with redux/toolkit , it became easy to use redux logic. As a developer , developer expereance will be good.

Question : Explain Dispatcher -
Answer:     useDispatcher is a Hook, which we use for dispatching a action with payload to update slice data.
            syntax :   
                        import useDispatcher from "react-redux"

                        const Dispatcher = useDispatcher();

                        Dispatcher(action("value));


Question : Explain reducer - 
Answer: Reducer is a function , which takes two params (state and action) , for updating the slice state variable in Redux store.

Question : Explain slice - 
Answer: In Redux store we can make these slices , as many we want , these slices will be holding a feature acc to us like one slice for cart , one slice for user etc...

            for creating a slice in store -  we use creatSlice function from "@reduxjs/toolkit"
            There will be name , initial state and reducer (with action and reducer function).
            check cartslice.js for implementation.

            Key point : Here after creating a slice , we have to export two values 
                        a) export const{ action itmes} = sliceName.actions 
                        b) export default sliceName.reducer

Question : Explain Selector - 
Answer:     For suscribing to a store we use Selector.
            it will come in useSelector Hook, which is present in "react-redux" Library.
            it has power to get data anywhere in the component. whatever we pass into the useSelector hook, it will point to that loaction and will be in sink with that.
                    ex- const data = useSelector(store)  // it will fetch the whole store.
                        const data = useSelector(store.sliceName)  // it will fetch the whole one slice which name is sliceName.
                        const data = useSelector(store.sliceName.stateVar)  // it will fetch only the stateVar.

                // efficient way is use the third way if we have to focus on only the data. and Advantage of this is if this data will be update then only this component will be rerendered , not by changing anything in slice/store.

Question : Explain creatslice and config it takes - 
Answer: import { createSlice } from "@reduxjs/toolkit";

        const cartSlice = createSlice({
          name: "cart",
          initialState: {
            items: ["banana", "mango"],
          },
          reducers: {
            addItem: (store, action) => {
              store.items.push(action.payload);
            },
            clearCart: (store, action) => {
              store.items = [];
            },
          },
        }
        export const { addItem, clearCart } = cartSlice.action
        export default cartSlice.reducer;



