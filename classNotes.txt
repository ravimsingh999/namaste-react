Layers : we see on the screen that is UI layer (JSX) :  it is JS object after babel change into  -- this js object is virtual dom.
        then there will be     Data Layer  (state and props).


diffrence in State and Props: State is local variable inside a component.
                                where props is like , we pass a variable as a argument in another component. so that this data can be use in that component.


Props Drilling : When we create a state variable in a component and that varibale we send it to child component and then we send it to again a child of child. so this is known as props drilling.

                component (with state variable email) -> child 1 (with props email) -> child 2 (child of 1)(with props email) -> child 3 (with props email)..... like this . Generally in large appliactions props are being used in many child layers.

                Disadvantages of props drilling: 1. When the number of layers will be big, then we have to change each parrent child component till last child which is using it. and this is a state variable so when state will be change then all the component will be re-rendered.


What if we have to pass data from child to parrent component : This case will be very rare where we have to do this , but there are ways to do it.
                                                                1. we can make own Hooks , for maintaing a variable , and we can access it where we want.


lifting the state up : if there is a state variable which is used by children component, means they have control over it. So when we remove that state and write in the parrent component with logic so that parrent will have control over it. This is known as a state lifting the state up.
                                example : in Instamart component , there is show & hide buttons for showing the details when click. there this concept is used.



***useContext : It is a react hook, which we use for central state variable, and we can access it where we want in our app.

                Why we use it ?
                        Suppose if there is a scenario where we need a state variable/data/info like user variable across all components or in many components , then we have two options either we can do props drilling or we can use use useContext Hook provided by react.
                                if we use props drilling, then it will be hard to maintain and it will be messy code.

                How we use it?
                        for using useContext Hook, we have to named import it from react lib.
                        before it when we will make a context , we have to implement {createContext} from react.
                        and we have to make a variable_namecontext.js (any name) and we have to give a default value in createContext function. then export this.

                        and where we have to use it , we import useContext as well as variable_namecontext and in useContext() we pass variable_namecontext as a arg.
                        const {data} = useContext(variable_namecontext);
                        and this data we can use, like <h1>{data.name/data.email......}</h1>
                
                How to use in class base component : for using in class base component we will treat as a component. and by using .Consumer
                                like : <UserContext.Consumer>
                                          {({ user }) => (
                                            <h1 className="heading font-bold">
                                              {user.email} - {user.email}
                                            </h1>
                                          )}
                                        </UserContext.Consumer>
                                here context data will be in the callback props. like this we can use context data in class base component.


                when we have to override a default value , we can use Provider.

                like : 
                        const [user,setUser] = useState({
                                name: "someName",
                                email: "someEmail",
                        });
                        <UserContext.Provider
                            value={{
                              user: user,
                              setUser : setUser // this we can pass so that where ever we want we can update the user data.
                            }}
                          >
                            <Header />
                            <Outlet />
                            <Footer />
                          </UserContext.Provider>
                
                Here in value we can give a user (state variable) with the dynamic data. which will replace the default value.
                // check app.js for this.






                        




                Other stateLibraries which we can use in place of useContext :   flux , mobex, ngrx etc...     

                